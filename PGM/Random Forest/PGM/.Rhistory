train_df_classificaiton  <- train
load("/Users/sofiapozsonyiova/Documents/GitHub/MasterProject/Data/Cox.Rdata")
library(survival)
library(dplyr)
library(ggsurvfit)
library(gtsummary)
library(haven)
library(survival)
library(ranger)
library(ggplot2)
library(dplyr)
library(ggfortify)
set.seed(1234)
sample <- sample(c(TRUE, FALSE), nrow(CoxDat), replace=TRUE, prob=c(0.8,0.2))
# Final Test
testval <- CoxDat[!sample, ]
# Training
train  <- CoxDat[sample, ]
table(testval$censorship)
table(train$censorship)
# balancing validation
grouped_data_test <- testval %>%
group_by(CognitiveFunction) %>% count()
mutate(size=n())
# balancing validation
grouped_data_test <- testval %>%
group_by(CognitiveFunction) %>%
mutate(size=n())
grouped_data2_test <-grouped_data_test  %>%
sample_n(size=73,replace = TRUE) %>%
ungroup()
Test_Balanced <- grouped_data2_test[!is.na(grouped_data2_test$CognitiveFunction), ]
Test_Balanced %>%
group_by(CognitiveFunction) %>%
summarise(cnt = n()) %>%
mutate(freq = round(cnt / sum(cnt), 3)) %>%
arrange(desc(freq))
# Balancing Training
grouped_data <- train %>%
group_by(CognitiveFunction) %>%
mutate(size=n())
grouped_data2 <-grouped_data  %>%
sample_n(size=310,replace = TRUE) %>% count()
ungroup()
# balancing validation
grouped_data_test <- testval %>%
group_by(CognitiveFunction) %>%
mutate(size=n())
grouped_data2_test <-grouped_data_test  %>%
sample_n(size=73,replace = TRUE) %>%
ungroup()
Test_Balanced <- grouped_data2_test[!is.na(grouped_data2_test$CognitiveFunction), ]
Test_Balanced %>%
group_by(CognitiveFunction) %>%
summarise(cnt = n()) %>%
mutate(freq = round(cnt / sum(cnt), 3)) %>%
arrange(desc(freq))
# Balancing Training
grouped_data <- train %>%
group_by(CognitiveFunction) %>%
mutate(size=n())
grouped_data2 <-grouped_data  %>%
sample_n(size=310,replace = TRUE) %>%
ungroup()
Train_Model_Dev_Balanced <- grouped_data2[!is.na(grouped_data2$CognitiveFunction), ]
Train_Model_Dev_Balanced %>%
group_by(CognitiveFunction) %>%
summarise(cnt = n()) %>%
mutate(freq = round(cnt / sum(cnt), 3)) %>%
arrange(desc(freq))
period_choice <- 9
train_df_classificaiton  <- train
train_df_classificaiton$ReachedEvent <- ifelse((train_df_classificaiton$CognitiveFunction==1 &                                                     train_df_classificaiton$Year<=period_choice), 1, 0)
validate_df_classification  <- testval
validate_df_classification$ReachedEvent <- ifelse((validate_df_classification$CognitiveFunction==1 &
validate_df_classification$Year<=period_choice), 1, 0)
survival_model <- ranger(Surv(Year, censorship) ~ evergowalk + (balancescore) + (walkscore) + (gripscoreAVG) + (airflowAVG) + vigoractivity + secswalkingcourse + livingarrangAlone + socialnetnum + (oftenoutside) + oftenleavMore + up20stairs  + walkbyself + agefeel + NumberComorbid + AnxietyDep  +  HealthperceivedGood+ metro+BarrierstoHealth,
data = train,
seed=1234,
verbose = TRUE,
num.trees = 500,
mtry = 4,
write.forest=TRUE )
#Harrel C index
cat("Prediction Error = 1 - Harrell's c-index = ", round(1-survival_model$prediction.error,2))
# Variable importance
r_fit <- ranger(Surv(Year, censorship) ~ evergowalk + (balancescore) + (walkscore) + (gripscoreAVG) + (airflowAVG) + vigoractivity + secswalkingcourse + livingarrangAlone + socialnetnum + (oftenoutside) + oftenleavMore + up20stairs  + walkbyself + agefeel + NumberComorbid + AnxietyDep  +  HealthperceivedGood+ metro,
data = train,
seed=1234,
mtry = 4,
importance = "permutation",
splitrule = "extratrees",
verbose = TRUE,
probability = TRUE,
write.forest = TRUE)
vi <- data.frame(sort(round(r_fit$variable.importance, 4), decreasing = TRUE))
names(vi) <- "importance"
vi
#Harrel C index
cat("Prediction Error = 1 - Harrell's c-index = ", round(1-survival_model$prediction.error,2))
# Variable importance
r_fit <- ranger(Surv(Year, censorship) ~ evergowalk + (balancescore) + (walkscore) + (gripscoreAVG) + (airflowAVG) + vigoractivity + secswalkingcourse + livingarrangAlone + socialnetnum + (oftenoutside) + oftenleavMore + up20stairs  + walkbyself + agefeel + NumberComorbid + AnxietyDep  +  HealthperceivedGood+ metro,
data = train,
seed=1234,
mtry = 4,
importance = "permutation",
splitrule = "extratrees",
verbose = TRUE,
probability = TRUE,
write.forest = TRUE)
library(survival)
library(dplyr)
library(ggsurvfit)
library(gtsummary)
library(haven)
library(survival)
library(ranger)
library(ggplot2)
library(dplyr)
library(ggfortify)
load("/Users/sofiapozsonyiova/Documents/GitHub/MasterProject/Data/Clean.Rdata")
Fingend <- Clean %>% dplyr::select(Year, spid, gender, CognitiveFunction) %>% filter((gender==-6))
trace <- Fingend %>% distinct(spid, .keep_all = TRUE) %>% dplyr::select(spid)
Clean <- Clean %>% filter(!spid %in% trace$spid)
# Fingend <- FINALDATA %>% dplyr::select(Year, spid, racehisp, CognitiveFunction) %>% filter(is.na(racehisp))
# trace <- Fingend %>% distinct(spid, .keep_all = TRUE) %>% dplyr::select(spid)
# Clean <- FINALDATA %>% filter(!spid %in% trace$spid)
Clean$CognitiveFunction <- as.integer(Clean$CognitiveFunction)
Clean$first_year_cog_1 <- ave(Clean$CognitiveFunction, Clean$spid, FUN = function(x) {
if (sum(x == 1) > 0) {
which.max(x == 1)
} else {
NA
}
})
Clean <- Clean %>%
mutate(CognitiveFunction = ifelse(is.na(first_year_cog_1) & CognitiveFunction == 2, 2, ifelse(Year >= first_year_cog_1, 1, CognitiveFunction))) %>% dplyr::select(-first_year_cog_1)
Clean_Sub <- Clean %>% filter(!spid %in% c("10000377",	"10000378",	"10000442",	"10000516",	"10000661",	"10001054",	"10001356",	"10001700",	"10001806",	"10002251",	"10002363",	"10002609",	"10002794",	"10003051",	"10003224",	"10003317",	"10003337",	"10003402",	"10003560",	"10003601",	"10004020",	"10004491",	"10004509",	"10004568",	"10004594",	"10004796",	"10004852",	"10004885",	"10004891",	"10004909",	"10005750",	"10006434",	"10006440",	"10006648",	"10006700",	"10006959",	"10006980",	"10007084",	"10007216",	"10007431",	"10007571",	"10007713",	"10008740",	"10008801",	"10008863",	"10008918",	"10009075",	"10009214",	"10009230",	"10009330",	"10009485",	"10009743",	"10009901",	"10010121",	"10010470",	"10010996",	"10011726",	"10011795",	"10011962",	"10012135",	"10012236",	"10012270","10000051","10000115","10000166","10000286","10000425","10000464",
"10000493","10000541","10000665","10000771","10000910","10000996","10001000","10001006","10001113","10001261","10001273","10001406","10001429","10001478","10001497","10001552","10001584","10001631","10001656","10001746","10001913","10001959","10002017","10002024","10002053","10002184","10002185","10002212","10002246","10002272","10002334","10002580","10002614","10002833","10002868","10003042","10003074","10003117","10003150","10003162","10003223","10003343","10003420","10003807","10003923","10003963","10004027","10004064","10004077","10004262","10004321","10004439","10004573","10004866","10004871","10004886","10005039","10005161","10005166","10005171","10005270","10005469","10005513","10005559","10005758","10005787","10005883","10006001","10006172","10006452","10006629","10006634","10006892","10006898","10006943","10006972","10007009","10007070","10007177","10007197","10007293","10007299","10007501","10007815","10007928","10007974","10008047","10008378","10008381","10008461","10008479","10008481","10008572","10008579","10008631","10008681","10008910","10008950","10008973","10008998","10009150","10009177","10009198","10009292","10009305","10009693","10009821","10009881","10009905","10010123","10010232","10010317","10010450","10010516","10010523","10010536","10010626","10010647","10010667","10010703","10010761","10010764","10010785","10010795","10010841","10010951","10010958","10010980","10011005","10011029","10011030","10011082","10011241","10011357","10011378","10011381","10011721","10011750",
"10011843","10011920","10011921","10011998","10012103","10012106","10012119",
"10012147","10012191","10012402","10012410"))
Clean_Sub <- Clean_Sub %>% dplyr::select(-retirmentcomm)
Clean_Sub$gender <- droplevels(Clean_Sub$gender)
Clean_Sub$martlstat <- droplevels(Clean_Sub$martlstat)
Clean_Sub$racehisp <- droplevels(Clean_Sub$racehisp)
Clean_Sub$veteran <- droplevels(Clean_Sub$veteran)
Clean_Sub$metro <- droplevels(Clean_Sub$metro)
Clean_Sub$intvrage <- droplevels(Clean_Sub$intvrage)
Clean_Sub$balancescore <- as.integer(Clean_Sub$balancescore)
Clean_Sub$walkscore <- as.integer(Clean_Sub$walkscore)
Clean_Sub$gripscoreAVG <- as.integer(Clean_Sub$gripscoreAVG)
Clean_Sub$airflowAVG <- as.integer(Clean_Sub$airflowAVG)
Clean_Sub$oftenoutside <- as.integer(Clean_Sub$oftenoutside)
Clean_Sub$mem1yr <- as.integer(Clean_Sub$mem1yr)
Clean_Sub$intvrage <- as.integer(Clean_Sub$intvrage)
Clean_Sub$BarrierstoHealth = relevel(Clean_Sub$BarrierstoHealth, ref = "1")
Clean_Sub$martlstat = relevel(Clean_Sub$martlstat, ref = "1")
# 1= Yes, 2 = No
Clean_Sub <- Clean_Sub %>% mutate(BarrierstoHealth = ifelse(BarrierstoHealth == -9 | BarrierstoHealth == 2, 2,1)) %>% mutate(Evermarried = ifelse(martlstat == -9 | martlstat == 6,2,1)) %>% mutate(RaceWhite = ifelse(racehisp == 1, 1, 2)) %>% mutate(evergowalk = ifelse(evergowalk == -9 | evergowalk == 2,2,1)) %>% mutate(HealthperceivedGood = ifelse(health == 1 | health == 2, 1, 2)) %>% mutate(vigoractivity = ifelse(vigoractivity == 1,1,2)) %>% mutate(walkbyself = ifelse(walkbyself == 1,1,2)) %>% mutate(livingarrangAlone = ifelse(livingarrang == 1, 1,2)) %>% mutate(up20stairs = ifelse(up20stairs == 1 ,1,2)) %>% mutate(oftenleavMore = ifelse(oftenleav == 1 | oftenleav == 3,1,2)) %>% mutate(AnxietyDep = ifelse(AnxietyDep == 1,1,2))
CoxDat <- Clean_Sub %>%mutate(BarrierstoHealth = ifelse(BarrierstoHealth == -9 | BarrierstoHealth == 2, 2,1)) %>% mutate(Evermarried = ifelse(martlstat == -9 | martlstat == 6,2,1)) %>% mutate(RaceWhite = ifelse(racehisp == 1, 1, 2)) %>% mutate(evergowalk = ifelse(evergowalk == -9 | evergowalk == 2,2,1)) %>% mutate(HealthperceivedGood = ifelse(health == 1 | health == 2, 1, 2)) %>% mutate(vigoractivity = ifelse(vigoractivity == 1,1,2)) %>% mutate(walkbyself = ifelse(walkbyself == 1,1,2)) %>% mutate(livingarrangAlone = ifelse(livingarrang == 1, 1,2)) %>% mutate(up20stairs = ifelse(up20stairs == 1 ,1,2)) %>% mutate(oftenleavMore = ifelse(oftenleav == 1 | oftenleav == 3,1,2)) %>% mutate(AnxietyDep = ifelse(AnxietyDep == 1,1,2)) %>% mutate(veteran = ifelse(veteran == 1, 1,2))  %>% dplyr::select(-re1dresistrct,-martlstat,-racehisp,-health,-livingarrang,-oftenleav) %>% mutate(CognitiveFunction = as.factor(CognitiveFunction))
CoxDat$BarrierstoHealth <- as.factor(CoxDat$BarrierstoHealth)
CoxDat$Evermarried <- as.factor(CoxDat$Evermarried)
CoxDat$RaceWhite <- as.factor(CoxDat$RaceWhite)
CoxDat$evergowalk <- as.factor(CoxDat$evergowalk)
CoxDat$HealthperceivedGood <- as.factor(CoxDat$HealthperceivedGood)
CoxDat$vigoractivity <- as.factor(CoxDat$vigoractivity)
CoxDat$walkbyself <- as.factor(CoxDat$walkbyself)
CoxDat$livingarrangAlone <- as.factor(CoxDat$livingarrangAlone)
CoxDat$up20stairs <- as.factor(CoxDat$up20stairs)
CoxDat$oftenleavMore <- as.factor(CoxDat$oftenleavMore)
CoxDat$AnxietyDep <- as.factor(CoxDat$AnxietyDep)
CoxDat$veteran <- as.factor(CoxDat$veteran)
# Changing age to age up
CoxDat <- CoxDat %>%  mutate(intvrage = ifelse(Year >= 5, intvrage + 1, intvrage))
# Identify the year of the first observation where cognitive decline == 1 for each individual
first_decline_year <- with(CoxDat, ave(Year[CognitiveFunction == 1], spid[CognitiveFunction == 1], FUN = min))
# Create a new variable for the year of first cognitive decline
CoxDat$first_decline_year <- ifelse(CoxDat$CognitiveFunction == 1, first_decline_year, 9)
# Create censorship variable
CoxDat$censorship <- ifelse(CoxDat$first_decline_year == 9, 0,1)
CoxDat_clean <- CoxDat %>%
group_by(spid) %>%
slice(if(any(CognitiveFunction == 1)) which.max(CognitiveFunction == 1) else n()) %>%
ungroup()
CoxDat_clean <- CoxDat_clean %>% dplyr::select(-Year) %>% mutate(Year = first_decline_year)
CoxDat <- CoxDat_clean
save(CoxDat,file = "/Users/sofiapozsonyiova/Documents/GitHub/MasterProject/Data/Cox.Rdata")
totalCog_bad <- CoxDat %>% filter(CognitiveFunction == 1) %>% distinct(spid, .keep_all = T) %>% dplyr::select(spid, Year, CognitiveFunction)
totalCog_good <- CoxDat %>% filter(CognitiveFunction == 2) %>% distinct(spid)
KM0 <- survfit(Surv(Year, censorship)~1, type = "kaplan-meier", conf.type = "none", data =  CoxDat)
summary(KM0)
plot(KM0, xlab = "Time", ylab = "Survival Probability", ylim = c(.96,1), main = "Kaplan Meier Plot Time Until Cognitive Decline")
survdiff(Surv(Year, censorship)~BarrierstoHealth, data =  CoxDat)
km_trt_fit <- survfit(Surv(Year, censorship)~BarrierstoHealth,  data =  CoxDat)
summary(km_trt_fit)
p <- autoplot(km_trt_fit, main = "Kaplan Meier Plot Time Until Cognitive Decline",xlab = "Time",
ylab = "Survival")
p2 <- p + scale_colour_discrete(name = "Barriers to Health",
labels = c("Yes", "No"))
print(p2)
library(pec)
library(glmnet)
library(MASS)
# sub_selection <- CoxDat %>% dplyr::select(-spid) %>% mutate(CognitiveFunction = as.factor(CognitiveFunction))
#
# modelall <- coxph(Surv(Year, CognitiveFunction == 1) ~  evergowalk + as.integer(balancescore) + as.integer(walkscore) + as.integer(gripscoreAVG) + as.integer(airflowAVG) + vigoractivity + secswalkingcourse + livingarrangAlone + socialnetnum + as.integer(oftenoutside) + oftenleavMore + up20stairs + as.integer(mem1yr) + walkbyself + agefeel + NumberComorbid + AnxietyDep  +  HealthperceivedGood+ metro, data = sub_selection)
# results.step <- stepAIC(modelall)
# AIC(results.step)
# coef(results.step)
library(survival)
library(glmnet)
sub_selection <- CoxDat
# Split data into training and test sets
set.seed(123)
train <- sample(nrow(sub_selection), nrow(sub_selection) * 0.8)
sub_selection_train <- sub_selection[train, ]
sub_selection_test <- sub_selection[-train, ]
# Create the design matrix
x_train <- model.matrix(Surv(Year, censorship) ~ evergowalk + as.integer(balancescore) + as.integer(walkscore) + as.integer(gripscoreAVG) + as.integer(airflowAVG) + vigoractivity + secswalkingcourse + livingarrangAlone + socialnetnum + as.integer(oftenoutside) + oftenleavMore + up20stairs + walkbyself + agefeel + NumberComorbid + AnxietyDep  +  HealthperceivedGood+ metro+BMI, data = sub_selection_train)
y_train <- Surv(sub_selection_train$Year, sub_selection_train$CognitiveFunction == 1)
fit <- cv.glmnet(x_train, y_train, family = "cox", alpha = 1)
plot(fit)
fit$lambda
# Get coefficient estimates for selected variables
coef <- coef(fit, s = 0.0113705796)
# Print the estimated coefficients and predicted survival probabilities
print(coef)
library(rms)
modreg <- glm(CognitiveFunction ~balancescore + walkscore+airflowAVG+up20stairs+oftenleavMore+AnxietyDep + NumberComorbid + RaceWhite+ Evermarried+  income + BMI+BarrierstoHealth+ veteran +as.integer(intvrage) + gender , family = "binomial", data = sub_selection)
round(vif(modreg),2)
# CoxDat <- Clean_Sub %>%mutate(BarrierstoHealth = ifelse(BarrierstoHealth == -9 | BarrierstoHealth == 2, 2,1)) %>% mutate(Evermarried = ifelse(martlstat == -9 | martlstat == 6,2,1)) %>% mutate(RaceWhite = ifelse(racehisp == 1, 1, 2)) %>% mutate(evergowalk = ifelse(evergowalk == -9 | evergowalk == 2,2,1)) %>% mutate(HealthperceivedGood = ifelse(health == 1 | health == 2, 1, 2)) %>% mutate(vigoractivity = ifelse(vigoractivity == 1,1,2)) %>% mutate(walkbyself = ifelse(walkbyself == 1,1,2)) %>% mutate(livingarrangAlone = ifelse(livingarrang == 1, 1,2)) %>% mutate(up20stairs = ifelse(up20stairs == 1 ,1,2)) %>% mutate(oftenleavMore = ifelse(oftenleav == 1 | oftenleav == 3,1,2)) %>% mutate(AnxietyDep = ifelse(AnxietyDep == 1,1,2)) %>% mutate(veteran = ifelse(veteran == 1, 1,2)) dplyr::select(-re1dresistrct,-martlstat,-racehisp,-health,-livingarrang,-oftenleav) %>% mutate(CognitiveFunction = as.factor(CognitiveFunction))
# CoxDat$BarrierstoHealth <- as.factor(CoxDat$BarrierstoHealth)
# CoxDat$Evermarried <- as.factor(CoxDat$Evermarried)
# CoxDat$RaceWhite <- as.factor(CoxDat$RaceWhite)
# CoxDat$evergowalk <- as.factor(CoxDat$evergowalk)
# CoxDat$HealthperceivedGood <- as.factor(CoxDat$HealthperceivedGood)
# CoxDat$vigoractivity <- as.factor(CoxDat$vigoractivity)
# CoxDat$walkbyself <- as.factor(CoxDat$walkbyself)
# CoxDat$livingarrangAlone <- as.factor(CoxDat$livingarrangAlone)
# CoxDat$up20stairs <- as.factor(CoxDat$up20stairs)
# CoxDat$oftenleav <- as.factor(CoxDat$oftenleav)
# CoxDat$AnxietyDep <- as.factor(CoxDat$AnxietyDep)
# CoxDat$veteran <- as.factor(CoxDat$veteran)
library(rms)
modreg <- glm(CognitiveFunction ~evergowalk + as.integer(balancescore) + as.integer(walkscore) + as.integer(gripscoreAVG) + as.integer(airflowAVG) + vigoractivity + secswalkingcourse + livingarrangAlone + socialnetnum + as.integer(oftenoutside) + oftenleavMore + up20stairs + walkbyself + agefeel + NumberComorbid + AnxietyDep  +  HealthperceivedGood+ metro + RaceWhite+ Evermarried+  income + BMI+BarrierstoHealth+ veteran +as.integer(intvrage) + gender , family = "binomial", data = sub_selection)
round(vif(modreg),2)
set.seed(707)
# Libraries
library(ggplot2)
library(gridExtra)
library(dplyr)
library(caret)
library(rpart)
library(rpart.plot)
library(class)
library(randomForest)
library(infer)
# Loading in data from github
# Training
load("/Users/sofiapozsonyiova/Documents/GitHub/Private707/data/Balanced/ModelDev_Train_BalancedUSE.RData")
# Testing
load("/Users/sofiapozsonyiova/Documents/GitHub/Private707/data/Balanced/FinalValidation_UnbalancedUSE.RData")
load("/Users/sofiapozsonyiova/Documents/GitHub/Private707/data/Balanced/FinalValidation_BalancedUSE.RData")
# Selecting clusters that are needed
Train_All <- Train_Model_Dev_Balanced %>% select(-P28)
# Initializing Random Forest
forest_modelAll <- train(
SelfPerceivedHealth ~ .,
data = Train_All,
method = "rf",
tuneGrid = data.frame(mtry = c(2,12)),
trControl = trainControl(method = "cv",number = 5),
metric = "Accuracy",
na.action = na.omit,
seed = 2023)
## Create a plot of variable importance
var_impAll <- var_impAll %>%
arrange(importance) %>%
ggplot(aes(x=reorder(variables, importance), y=importance)) +
geom_bar(stat='identity', fill = "cornflowerblue") +
coord_flip() +
xlab('Variables') +
labs(title='Random Forest Variable Importance (All predictors)') + ylab("Gini Impurity") +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14))
## Get variable importance, and turn into a data frame
var_impAll <- varImp(forest_modelAll, scale=FALSE)$importance
var_impAll <- data.frame(variables=row.names(var_impAll), importance=var_impAll$Overall)
var_impAll %>% arrange(desc(importance))
## Create a plot of variable importance
var_impAll <- var_impAll %>%
arrange(importance) %>%
ggplot(aes(x=reorder(variables, importance), y=importance)) +
geom_bar(stat='identity', fill = "cornflowerblue") +
coord_flip() +
xlab('Variables') +
labs(title='Random Forest Variable Importance (All predictors)') + ylab("Gini Impurity") +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14))
#ggsave("/Users/sofiapozsonyiova/Documents/GitHub/707FinalProject/PGM/Model\ Building/var_impAll.png")
var_impAll
ggsave("/Users/sofiapozsonyiova/Documents/GitHub/707FinalProject/PGM/Model\ Building/var_impAll.png")
## Create a plot of variable importance
var_impAll <- var_impAll %>%
arrange(importance) %>%
ggplot(aes(x=reorder(variables, importance), y=importance)) +
geom_bar(stat='identity', fill = "cornflowerblue") +
coord_flip() +
xlab('Variables') +
labs(title='Random Forest Variable Importance (All predictors)') + ylab("Gini Impurity") +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14))
## Create a plot of variable importance
var_impAll <- var_impAll %>%
arrange(importance) %>%
ggplot(aes(x=reorder(variables, importance), y=importance)) +
geom_bar(stat='identity', fill = "cornflowerblue") +
coord_flip() +
xlab('Variables') +
labs(title='Random Forest Variable Importance (All predictors)') + ylab("Gini Impurity") +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14))
## Create a plot of variable importance
var_impAll <- var_impAll %>%
arrange(importance) %>%
ggplot(aes(x=reorder(variables, importance), y=importance)) +
geom_bar(stat='identity', fill = "cornflowerblue") +
coord_flip() +
xlab('Variables') +
labs(title='Random Forest Variable Importance (All predictors)') + ylab("Gini Impurity") +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14))
ggsave(var_impAll,"/Users/sofiapozsonyiova/Documents/GitHub/707FinalProject/PGM/Model\ Building/var_impAll.png")
ggsave("/Users/sofiapozsonyiova/Documents/GitHub/707FinalProject/var_impAll.png")
## Create a plot of variable importance
var_impAll <- var_impAll %>%
arrange(importance) %>%
ggplot(aes(x=reorder(variables, importance), y=importance)) +
geom_bar(stat='identity', fill = "cornflowerblue") +
coord_flip() +
xlab('Variables') +
labs(title='Random Forest Variable Importance (All predictors)') + ylab("Gini Impurity") +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14))
var_impAll <- var_impAll %>%
arrange(importance) %>%
ggplot(aes(x=reorder(variables, importance), y=importance)) +
geom_bar(stat='identity', fill = "cornflowerblue") +
coord_flip() +
xlab('Variables') +
labs(title='Random Forest Variable Importance (All predictors)') + ylab("Gini Impurity") +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14))
## Create a plot of variable importance
var_impAll <- var_impAll %>%
ggplot(aes(x=reorder(variables, importance), y=importance)) +
geom_bar(stat='identity', fill = "cornflowerblue") +
coord_flip() +
xlab('Variables') +
labs(title='Random Forest Variable Importance (All predictors)') + ylab("Gini Impurity") +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14))
## Get variable importance, and turn into a data frame
var_impAll <- varImp(forest_modelAll, scale=FALSE)$importance
var_impAll <- data.frame(variables=row.names(var_impAll), importance=var_impAll$Overall)
var_impAll %>% arrange(desc(importance))
## Create a plot of variable importance
var_impAll <- var_impAll %>%
ggplot(aes(x=reorder(variables, importance), y=importance)) +
geom_bar(stat='identity', fill = "cornflowerblue") +
coord_flip() +
xlab('Variables') +
labs(title='Random Forest Variable Importance (All predictors)') + ylab("Gini Impurity") +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14))
ggsave("/Users/sofiapozsonyiova/Documents/GitHub/707FinalProject/var_impAll.png")
var_impAll
## Create a plot of variable importance
var_impAll <- var_impAll %>%
ggplot(aes(x=reorder(variables, importance), y=importance)) +
geom_bar(stat='identity', fill = "cornflowerblue") +
coord_flip() +
xlab('Variables') +
labs(title='Random Forest Variable Importance (All predictors)') + ylab("Gini Impurity") +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
## Get variable importance, and turn into a data frame
var_impAll <- varImp(forest_modelAll, scale=FALSE)$importance
var_impAll <- data.frame(variables=row.names(var_impAll), importance=var_impAll$Overall)
var_impAll %>% arrange(desc(importance))
## Create a plot of variable importance
var_impAll <- var_impAll %>%
ggplot(aes(x=reorder(variables, importance), y=importance)) +
geom_bar(stat='identity', fill = "cornflowerblue") +
coord_flip() +
xlab('Variables') +
labs(title='Random Forest Variable Importance (All predictors)') + ylab("Gini Impurity") +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
var_impAll
## Get variable importance, and turn into a data frame
var_impAll <- varImp(forest_modelAll, scale=FALSE)$importance
var_impAll <- data.frame(variables=row.names(var_impAll), importance=var_impAll$Overall)
var_impAll %>% arrange(desc(importance))
## Create a plot of variable importance
var_impAll <- var_impAll %>%
ggplot(aes(x=reorder(variables, importance), y=importance)) +
geom_bar(stat='identity', fill = "cornflowerblue") +
coord_flip() +
xlab('Variables') +
labs(title='Random Forest Variable Importance (All predictors)') + ylab("Gini Impurity") +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
panel.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
var_impAll
Train_sub12 <- Train_Model_Dev_Balanced %>% select(-P28) %>% dplyr::select(c(P49f,P49a,P50b,P49l,P47e,P49h,P34,P26a,P37,P49i,P49p,P49e,SelfPerceivedHealth))
# Initializing Random Forest
forest_model_12 <- train(
SelfPerceivedHealth ~ .,
data = Train_sub12,
method = "rf",
tuneGrid = data.frame(mtry = c(2,4,6,12)),
trControl = trainControl(method = "cv",number = 5),
metric = "Accuracy",
na.action = na.omit,
seed = 2023)
## Get variable importance, and turn into a data frame
var_imp12 <- varImp(forest_model_12, scale=FALSE)$importance
var_imp12 <- data.frame(variables=row.names(var_imp12), importance=var_imp12$Overall)
var_imp12 %>% arrange(desc(importance))
## Create a plot of variable importance
var_imp12 <- var_imp12 %>%
arrange(importance) %>%
ggplot(aes(x=reorder(variables, importance), y=importance)) +
geom_bar(stat='identity', fill = "cornflowerblue") +
coord_flip() +
xlab('Variables') +
labs(title='Random Forest Variable Importance (All predictors)') + ylab("Gini Impurity") +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14))
#ggsave("/Users/sofiapozsonyiova/Documents/GitHub/707FinalProject/PGM/Model\ Building/var_impAll.png")
var_imp12
# Initializing Random Forest
forest_model_4 <- train(
SelfPerceivedHealth ~ .,
data = Train_sub4,
method = "rf",
tuneGrid = data.frame(mtry = c(1,2,4)),
trControl = trainControl(method = "cv",number = 5),
metric = "Accuracy",
na.action = na.omit,
seed = 2023)
Train_sub4 <- Train_Model_Dev_Balanced %>% select(-P28) %>% dplyr::select(c(P49f,P49a,P50b,P37,P49l,SelfPerceivedHealth))
# Initializing Random Forest
forest_model_4 <- train(
SelfPerceivedHealth ~ .,
data = Train_sub4,
method = "rf",
tuneGrid = data.frame(mtry = c(1,2,4)),
trControl = trainControl(method = "cv",number = 5),
metric = "Accuracy",
na.action = na.omit,
seed = 2023)
## Get variable importance, and turn into a data frame
var_imp4 <- varImp(forest_model_4, scale=FALSE)$importance
var_imp4 <- data.frame(variables=row.names(var_imp4), importance=var_imp4$Overall)
var_imp4 %>% arrange(desc(importance))
## Create a plot of variable importance
var_imp4 <- var_imp4 %>%
arrange(importance) %>%
ggplot(aes(x=reorder(variables, importance), y=importance)) +
geom_bar(stat='identity', fill = "cornflowerblue") +
coord_flip() +
xlab('Variables') +
labs(title='Random Forest Variable Importance (All predictors)') + ylab("Gini Impurity") +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14))
#ggsave("/Users/sofiapozsonyiova/Documents/GitHub/707FinalProject/PGM/Model\ Building/var_impAll.png")
var_imp4
## Create a plot of variable importance
var_imp12 <- var_imp12 %>%
arrange(importance) %>%
ggplot(aes(x=reorder(variables, importance), y=importance)) +
geom_bar(stat='identity', fill = "cornflowerblue") +
coord_flip() +
xlab('Variables') +
labs(title='Random Forest Variable Importance (All predictors)') + ylab("Gini Impurity") +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14))
## Get variable importance, and turn into a data frame
var_imp12 <- varImp(forest_model_12, scale=FALSE)$importance
var_imp12 <- data.frame(variables=row.names(var_imp12), importance=var_imp12$Overall)
var_imp12 %>% arrange(desc(importance))
## Create a plot of variable importance
var_imp12 <- var_imp12 %>%
arrange(importance) %>%
ggplot(aes(x=reorder(variables, importance), y=importance)) +
geom_bar(stat='identity', fill = "cornflowerblue") +
coord_flip() +
xlab('Variables') +
labs(title='Random Forest Variable Importance (All predictors)') + ylab("Gini Impurity") +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14))
#ggsave("/Users/sofiapozsonyiova/Documents/GitHub/707FinalProject/PGM/Model\ Building/var_impAll.png")
ggsave("/Users/sofiapozsonyiova/Documents/GitHub/707FinalProject/var_imp12.png")
var_imp12
