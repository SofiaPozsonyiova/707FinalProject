## Plot the bar graph
geom_bar(stat='identity') +
## Flip the graph to make a horizontal bar plot
coord_flip() +
## Add x-axis label
xlab('Variables') +
## Add a title
labs(title='Random forest variable importance') +
## Some layout for the plot
theme_minimal() +
theme(axis.text = element_text(size = 10),
axis.title = element_text(size = 15),
plot.title = element_text(size = 20),)
## Create a plot of variable importance
var_imp %>%
## Sort the data by importance
arrange(importance[1:20]) %>%
## Create a ggplot object for aesthetic
ggplot(aes(x=reorder(variables, importance), y=importance)) +
## Plot the bar graph
geom_bar(stat='identity') +
## Flip the graph to make a horizontal bar plot
coord_flip() +
## Add x-axis label
xlab('Variables') +
## Add a title
labs(title='Random forest variable importance') +
## Some layout for the plot
theme_minimal() +
theme(axis.text = element_text(size = 10),
axis.title = element_text(size = 15),
plot.title = element_text(size = 20),)
var_imp <- var_imp[20]
var_imp <- var_imp[20,]
var_imp
var_imp <- var_imp[1:20,]
var_imp
var_imp <- var_imp[,1:20]
var_imp <- var_imp[,20]
var_imp <- var_imp
var_imp
var_imp <- varImp(forest_model, scale=FALSE)$importance
var_imp <- data.frame(variables=row.names(var_imp), importance=var_imp$Overall)
var_imp <- var_imp
var_imp
var_imp <- var_imp %>% head(20)
var_imp
var_imp <- var_imp %>%arrange(desc(importance)) %>% head(20)
## Create a plot of variable importance
var_imp %>%
## Sort the data by importance
arrange(importance) %>%
## Create a ggplot object for aesthetic
ggplot(aes(x=reorder(variables, importance), y=importance)) +
## Plot the bar graph
geom_bar(stat='identity') +
## Flip the graph to make a horizontal bar plot
coord_flip() +
## Add x-axis label
xlab('Variables') +
## Add a title
labs(title='Random forest variable importance') +
## Some layout for the plot
theme_minimal() +
theme(axis.text = element_text(size = 10),
axis.title = element_text(size = 15),
plot.title = element_text(size = 20),)
var_imp %>%arrange(desc(importance))
var_imp %>%arrange((importance))
arrange(asc(importance))
arrange((importance))
var_imp %>%arrange((importance))
var_imp %>%arrange(desc(importance))
var_imp <- varImp(forest_model, scale=FALSE)$importance
var_imp <- data.frame(variables=row.names(var_imp), importance=var_imp$Overall)
var_imp
var_imp %>%arrange(desc(importance))
var_imp %>%arrange(desc(importance)) %>% head(20)
var_imp <- var_imp %>%arrange(desc(importance)) %>% head(20)
## Create a plot of variable importance
var_imp %>%
## Sort the data by importance
arrange(importance) %>%
## Create a ggplot object for aesthetic
ggplot(aes(x=reorder(variables, importance), y=importance)) +
## Plot the bar graph
geom_bar(stat='identity') +
## Flip the graph to make a horizontal bar plot
coord_flip() +
## Add x-axis label
xlab('Variables') +
## Add a title
labs(title='Random forest variable importance') +
## Some layout for the plot
theme_minimal() +
theme(axis.text = element_text(size = 10),
axis.title = element_text(size = 15),
plot.title = element_text(size = 20),)
## Create a plot of variable importance
var_imp %>%
## Sort the data by importance
arrange(importance) %>%
## Create a ggplot object for aesthetic
ggplot(aes(x=reorder(variables, importance), y=importance)) +
## Plot the bar graph
geom_bar(stat='identity', fill = "Blue") +
## Flip the graph to make a horizontal bar plot
coord_flip() +
## Add x-axis label
xlab('Variables') +
## Add a title
labs(title='Random forest Variable Importance', xlab = "Importance") +
## Some layout for the plot
theme_minimal() +
theme(axis.text = element_text(size = 10),
axis.title = element_text(size = 15),
plot.title = element_text(size = 20),)
## Create a plot of variable importance
var_imp %>%
## Sort the data by importance
arrange(importance) %>%
## Create a ggplot object for aesthetic
ggplot(aes(x=reorder(variables, importance), y=importance)) +
## Plot the bar graph
geom_bar(stat='identity', fill = "aqua") +
## Flip the graph to make a horizontal bar plot
coord_flip() +
## Add x-axis label
xlab('Variables') +
## Add a title
labs(title='Random forest Variable Importance', xlab = "Importance") +
## Some layout for the plot
theme_minimal() +
theme(axis.text = element_text(size = 10),
axis.title = element_text(size = 15),
plot.title = element_text(size = 20),)
## Create a plot of variable importance
var_imp %>%
## Sort the data by importance
arrange(importance) %>%
## Create a ggplot object for aesthetic
ggplot(aes(x=reorder(variables, importance), y=importance)) +
## Plot the bar graph
geom_bar(stat='identity', fill = "teal") +
## Flip the graph to make a horizontal bar plot
coord_flip() +
## Add x-axis label
xlab('Variables') +
## Add a title
labs(title='Random forest Variable Importance', xlab = "Importance") +
## Some layout for the plot
theme_minimal() +
theme(axis.text = element_text(size = 10),
axis.title = element_text(size = 15),
plot.title = element_text(size = 20),)
## Create a plot of variable importance
var_imp %>%
## Sort the data by importance
arrange(importance) %>%
## Create a ggplot object for aesthetic
ggplot(aes(x=reorder(variables, importance), y=importance)) +
## Plot the bar graph
geom_bar(stat='identity', fill = "cornflowerblue") +
## Flip the graph to make a horizontal bar plot
coord_flip() +
## Add x-axis label
xlab('Variables') +
## Add a title
labs(title='Random forest Variable Importance', xlab = "Importance") +
## Some layout for the plot
theme_minimal() +
theme(axis.text = element_text(size = 10),
axis.title = element_text(size = 15),
plot.title = element_text(size = 20),)
## Create a plot of variable importance
var_imp %>%
## Sort the data by importance
arrange(importance) %>%
## Create a ggplot object for aesthetic
ggplot(aes(x=reorder(variables, importance), y=importance)) +
## Plot the bar graph
geom_bar(stat='identity', fill = "cornflowerblue") +
## Flip the graph to make a horizontal bar plot
coord_flip() +
## Add x-axis label
xlab('Variables') +
## Add a title
labs(title='Random forest Variable Importance') + xlab("Importance")
## Create a plot of variable importance
var_imp %>%
## Sort the data by importance
arrange(importance) %>%
## Create a ggplot object for aesthetic
ggplot(aes(x=reorder(variables, importance), y=importance)) +
## Plot the bar graph
geom_bar(stat='identity', fill = "cornflowerblue") +
## Flip the graph to make a horizontal bar plot
coord_flip() +
## Add x-axis label
xlab('Variables') +
## Add a title
labs(title='Random forest Variable Importance') + ylab("Importance")
Test <- Test %>% select(c(P49f,P49l,P26a,P50b,P49a,P37,P49h,P45,P49i,P49e,P342,P47e,P50c,P41g,P47a,P50d,P47b,P49p,P49d,P50a))
Test <- Test %>% dplyr::select(c(P49f,P49l,P26a,P50b,P49a,P37,P49h,P45,P49i,P49e,P342,P47e,P50c,P41g,P47a,P50d,P47b,P49p,P49d,P50a))
Test <- Test %>% dplyr::select(c(P49f,P49l,P26a,P50b,P49a,P37,P49h,P45,P49i,P49e,P34,P47e,P50c,P41g,P47a,P50d,P47b,P49p,P49d,P50a))
Test <- Test %>% dplyr::select(c(P49f,P49l,P26a,P50b,P49a,P37,P49h,P45,P49i,P49e,P34,P47e,P50c,P41g,P47a,P50d,P47b,P49p,P49d,P50a,SelfPerceivedHealth))
load("/Users/sofiapozsonyiova/Documents/GitHub/Private707/data/ModelDev_Test.RData")
Test <- Test %>% dplyr::select(c(P49f,P49l,P26a,P50b,P49a,P37,P49h,P45,P49i,P49e,P34,P47e,P50c,P41g,P47a,P50d,P47b,P49p,P49d,P50a,SelfPerceivedHealth))
names(Test)
## Generate predictions
y_hats <- predict(
## Random forest object
object=forest_model,
## Data to use for predictions; remove the Species
newdata=Test[, -21])
Test <- Test %>% dplyr::select(c(P49f,P49l,P26a,P50b,P49a,P37,P49h,P45,P49i,P49e,P34,P47e,P50c,P41g,P47a,P50d,P47b,P49p,P49d,P50a,SelfPerceivedHealth))
names(Tess)
names(Test)
load("/Users/sofiapozsonyiova/Documents/GitHub/Private707/data/ModelDev_Test.RData")
names()
names(Test)
## Generate predictions
y_hats <- predict(
## Random forest object
object=forest_model,
## Data to use for predictions; remove the Species
newdata=Test[, -117])
accuracy <- mean(y_hats == Test$SelfPerceivedHealth)*100
cat('Accuracy on testing data: ', round(accuracy, 2), '%',  sep='')
Train <- Train %>% select(-P28) %>% dplyr::select(c(P49f,P49l,P26a,P50b,P49a,P37,P49h,P45,P49i,P49e,P34,P47e,P50c,P41g,P47a,P50d,P47b,P49p,P49d,P50a,SelfPerceivedHealth))
load("/Users/sofiapozsonyiova/Documents/GitHub/Private707/data/ModelDev_Train.RData")
Train <- Train %>% select(-P28) %>% dplyr::select(c(P49f,P49l,P26a,P50b,P49a,P37,P49h,P45,P49i,P49e,P34,P47e,P50c,P41g,P47a,P50d,P47b,P49p,P49d,P50a,SelfPerceivedHealth))
Train_sub <- Train %>% select(-P28) %>% dplyr::select(c(P49f,P49l,P26a,P50b,P49a,P37,P49h,P45,P49i,P49e,P34,P47e,P50c,P41g,P47a,P50d,P47b,P49p,P49d,P50a,SelfPerceivedHealth))
load("/Users/sofiapozsonyiova/Documents/GitHub/Private707/data/ModelDev_Train.RData")
Train_sub <- Train %>% select(-P28) %>% dplyr::select(c(P49f,P49l,P26a,P50b,P49a,P37,P49h,P45,P49i,P49e,P34,P47e,P50c,P41g,P47a,P50d,P47b,P49p,P49d,P50a,SelfPerceivedHealth))
# Initializing Random Forest
forest_model <- train(
SelfPerceivedHealth ~ .,
data = Train_sub,
method = "rf",
tuneGrid = data.frame(mtry = c(2,20)),
trControl = trainControl(method = "oob"),
metric = "Accuracy",
na.action = na.omit)
# Plot Forest Model
plot(forest_model)
# Final model Forest
forest_model$finalModel
# Spit out variables of importance
variable_importance <- data.frame(randomForest::importance(forest_model$finalModel)) %>%  mutate(predictor = rownames(.))
variable_importance
## Arrange predictors by importance (most to least)
variable_importance %>%
arrange(desc(MeanDecreaseGini))
var_imp <- varImp(forest_model, scale=FALSE)$importance
var_imp <- data.frame(variables=row.names(var_imp), importance=var_imp$Overall)
## Create a plot of variable importance
var_imp %>%
## Sort the data by importance
arrange(importance) %>%
## Create a ggplot object for aesthetic
ggplot(aes(x=reorder(variables, importance), y=importance)) +
## Plot the bar graph
geom_bar(stat='identity', fill = "cornflowerblue") +
## Flip the graph to make a horizontal bar plot
coord_flip() +
## Add x-axis label
xlab('Variables') +
## Add a title
labs(title='Random forest Variable Importance') + ylab("Importance")
Test_sub <- Test %>% dplyr::select(c(P49f,P49l,P26a,P50b,P49a,P37,P49h,P45,P49i,P49e,P34,P47e,P50c,P41g,P47a,P50d,P47b,P49p,P49d,P50a,SelfPerceivedHealth))
names(Test_sub)
## Generate predictions
y_hats <- predict(
## Random forest object
object=forest_model,
## Data to use for predictions; remove the Species
newdata=Test_sub[, -21])
## Print the accuracy
accuracy <- mean(y_hats == Test$SelfPerceivedHealth)*100
cat('Accuracy on testing data: ', round(accuracy, 2), '%',  sep='')
View(variable_importance)
# Spit out variables of importance
variable_importance_sub20 <- data.frame(randomForest::importance(forest_model$finalModel)) %>%  mutate(predictor = rownames(.))
save(variable_importance_sub20,file = "/Users/sofiapozsonyiova/Documents/GitHub/Private707/data/Cluster\ Data/Var_Imp20.RData")
var_imp <- var_imp %>%arrange(desc(importance)) %>% head(20)
va_imp
var_imp
# Plot Forest Model
plot(forest_model)
Train_sub5 <- Train %>% select(-P28) %>% dplyr::select(c(P37,P49f,P45,P26a,P49l)
)
# Initializing Random Forest
forest_model <- train(
SelfPerceivedHealth ~ .,
data = Train_sub5,
method = "rf",
tuneGrid = data.frame(mtry = c(2,20)),
trControl = trainControl(method = "oob"),
metric = "Accuracy",
na.action = na.omit)
load("/Users/sofiapozsonyiova/Documents/GitHub/Private707/data/ModelDev_Train.RData")
Train_sub5 <- Train %>% select(-P28) %>% dplyr::select(c(P37,P49f,P45,P26a,P49l,SelfPerceivedHealth))
# Initializing Random Forest
forest_model <- train(
SelfPerceivedHealth ~ .,
data = Train_sub5,
method = "rf",
tuneGrid = data.frame(mtry = c(2,20)),
trControl = trainControl(method = "oob"),
metric = "Accuracy",
na.action = na.omit)
# Plot Forest Model
plot(forest_model)
# Final model Forest
forest_model$finalModel
# Spit out variables of importance
variable_importance_sub20 <- data.frame(randomForest::importance(forest_model$finalModel)) %>%  mutate(predictor = rownames(.))
# Spit out variables of importance
variable_importance_sub5 <- data.frame(randomForest::importance(forest_model$finalModel)) %>%  mutate(predictor = rownames(.))
variable_importance_sub5
## Arrange predictors by importance (most to least)
variable_importance %>%
arrange(desc(MeanDecreaseGini))
## Arrange predictors by importance (most to least)
variable_importance_sub5 %>%
arrange(desc(MeanDecreaseGini))
var_imp <- varImp(forest_model, scale=FALSE)$importance
var_imp <- data.frame(variables=row.names(var_imp), importance=var_imp$Overall)
## Create a plot of variable importance
var_imp %>%
## Sort the data by importance
arrange(importance) %>%
## Create a ggplot object for aesthetic
ggplot(aes(x=reorder(variables, importance), y=importance)) +
## Plot the bar graph
geom_bar(stat='identity', fill = "cornflowerblue") +
## Flip the graph to make a horizontal bar plot
coord_flip() +
## Add x-axis label
xlab('Variables') +
## Add a title
labs(title='Random forest Variable Importance') + ylab("Importance")
Train_sub5 <- Train %>% dplyr::select(c(P37,P49f,P45,P26a,P49l,SelfPerceivedHealth))
names(Train_sub5)
## Generate predictions
y_hats <- predict(
## Random forest object
object=forest_model,
## Data to use for predictions; remove the Species
newdata=Train_sub5[, -6])
## Print the accuracy
accuracy <- mean(y_hats == Test$SelfPerceivedHealth)*100
## Print the accuracy
accuracy <- mean(y_hats == Test_sub5$SelfPerceivedHealth)*100
Train_sub5 <- Train %>% dplyr::select(c(P37,P49f,P45,P26a,P49l,SelfPerceivedHealth))
## Generate predictions
y_hats <- predict(
## Random forest object
object=forest_model,
## Data to use for predictions; remove the Species
newdata=Train_sub5[, -6])
## Print the accuracy
accuracy <- mean(y_hats == Test_sub5$SelfPerceivedHealth)*100
Test_sub5 <- Train %>% dplyr::select(c(P37,P49f,P45,P26a,P49l,SelfPerceivedHealth))
Test_sub5 <- Test %>% dplyr::select(c(P37,P49f,P45,P26a,P49l,SelfPerceivedHealth))
## Generate predictions
y_hats <- predict(
## Random forest object
object=forest_model,
## Data to use for predictions; remove the Species
newdata=Test_sub5[, -6])
## Print the accuracy
accuracy <- mean(y_hats == Test_sub5$SelfPerceivedHealth)*100
cat('Accuracy on testing data: ', round(accuracy, 2), '%',  sep='')
names(Test_sub2)
Test_sub2 <- Test %>% dplyr::select(c(P49f,P49l,SelfPerceivedHealth))
names(Test_sub2)
Train_sub2 <- Train %>% select(-P28) %>% dplyr::select(c(P49f,P49l,SelfPerceivedHealth))
# Initializing Random Forest
forest_model <- train(
SelfPerceivedHealth ~ .,
data = Train_sub2,
method = "rf",
tuneGrid = data.frame(mtry = c(1,2)),
trControl = trainControl(method = "oob"),
metric = "Accuracy",
na.action = na.omit)
# Plot Forest Model
plot(forest_model)
# Final model Forest
forest_model$finalModel
# Spit out variables of importance
variable_importance_sub5 <- data.frame(randomForest::importance(forest_model$finalModel)) %>%  mutate(predictor = rownames(.))
# Spit out variables of importance
variable_importance_sub2 <- data.frame(randomForest::importance(forest_model$finalModel)) %>%  mutate(predictor = rownames(.))
## Arrange predictors by importance (most to least)
variable_importance_sub2 %>%
arrange(desc(MeanDecreaseGini))
var_imp <- data.frame(variables=row.names(var_imp), importance=var_imp$Overall)
## Create a plot of variable importance
var_imp %>%
## Sort the data by importance
arrange(importance) %>%
## Create a ggplot object for aesthetic
ggplot(aes(x=reorder(variables, importance), y=importance)) +
## Plot the bar graph
geom_bar(stat='identity', fill = "cornflowerblue") +
## Flip the graph to make a horizontal bar plot
coord_flip() +
## Add x-axis label
xlab('Variables') +
## Add a title
labs(title='Random forest Variable Importance') + ylab("Importance")
## Get variable importance, and turn into a data frame
var_imp <- varImp(forest_model, scale=FALSE)$importance
var_imp <- data.frame(variables=row.names(var_imp), importance=var_imp$Overall)
## Create a plot of variable importance
var_imp %>%
## Sort the data by importance
arrange(importance) %>%
## Create a ggplot object for aesthetic
ggplot(aes(x=reorder(variables, importance), y=importance)) +
## Plot the bar graph
geom_bar(stat='identity', fill = "cornflowerblue") +
## Flip the graph to make a horizontal bar plot
coord_flip() +
## Add x-axis label
xlab('Variables') +
## Add a title
labs(title='Random forest Variable Importance') + ylab("Importance")
Test_sub2 <- Test %>% dplyr::select(c(P49f,P49l,SelfPerceivedHealth))
## Generate predictions
y_hats <- predict(
## Random forest object
object=forest_model,
## Data to use for predictions; remove the Species
newdata=Test_sub2[, -3])
## Print the accuracy
accuracy <- mean(y_hats == Test_sub2$SelfPerceivedHealth)*100
cat('Accuracy on testing data: ', round(accuracy, 2), '%',  sep='')
Train_sub1 <- Train %>% select(-P28) %>% dplyr::select(c(P49f,SelfPerceivedHealth))
# Initializing Random Forest
forest_model <- train(
SelfPerceivedHealth ~ .,
data = Train_sub1,
method = "rf",
tuneGrid = data.frame(mtry = c(1,2)),
trControl = trainControl(method = "oob"),
metric = "Accuracy",
na.action = na.omit)
# Plot Forest Model
plot(forest_model)
# Final model Forest
forest_model$finalModel
# Spit out variables of importance
variable_importance_sub1 <- data.frame(randomForest::importance(forest_model$finalModel)) %>%  mutate(predictor = rownames(.))
## Arrange predictors by importance (most to least)
variable_importance_sub1 %>%
arrange(desc(MeanDecreaseGini))
## Get variable importance, and turn into a data frame
var_imp <- varImp(forest_model, scale=FALSE)$importance
var_imp <- data.frame(variables=row.names(var_imp), importance=var_imp$Overall)
## Create a plot of variable importance
var_imp %>%
## Sort the data by importance
arrange(importance) %>%
## Create a ggplot object for aesthetic
ggplot(aes(x=reorder(variables, importance), y=importance)) +
## Plot the bar graph
geom_bar(stat='identity', fill = "cornflowerblue") +
## Flip the graph to make a horizontal bar plot
coord_flip() +
## Add x-axis label
xlab('Variables') +
## Add a title
labs(title='Random forest Variable Importance') + ylab("Importance")
Test_sub1 <- Test %>% dplyr::select(c(P49f,SelfPerceivedHealth))
## Generate predictions
y_hats <- predict(
## Random forest object
object=forest_model,
## Data to use for predictions; remove the Species
newdata=Test_sub1[, -2])
Test_sub1 <- Test %>% dplyr::select(c(P49f,SelfPerceivedHealth))
names(Test_sub1)
## Generate predictions
y_hats <- predict(
## Random forest object
object=forest_model,
## Data to use for predictions; remove the Species
newdata=Test_sub1[, -2])
Test_sub1
names(Test_sub1)
load("/Users/sofiapozsonyiova/Documents/GitHub/Private707/data/ModelDev_Test.RData")
Test_sub1 <- Test %>% dplyr::select(c(P49f,SelfPerceivedHealth))
## Generate predictions
y_hats <- predict(
## Random forest object
object=forest_model,
## Data to use for predictions; remove the Species
newdata=Test_sub1[, -2])
Test_sub1[, -2]
## Generate predictions
y_hats <- predict(
## Random forest object
object=forest_model,
## Data to use for predictions; remove the Species
newdata= Test_sub1 %>% select(-SelfPerceivedHealth))
## Print the accuracy
accuracy <- mean(y_hats == Test_sub1$SelfPerceivedHealth)*100
cat('Accuracy on testing data: ', round(accuracy, 2), '%',  sep='')
